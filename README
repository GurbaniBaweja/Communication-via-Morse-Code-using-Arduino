-----------------------------------------------------------------------------------------------------

Author: Gurbani Baweja
Morse Code Communication using Diffie-Helman Scheme

------------------------------------------------------------------------------------------------------
=> Included Files:
 1) communication.cpp
 2) README
 3) Makefile

-------------------------------------------------------------------------------------------------------


=> Wiring  instructions:

==> tft display shield
- Slide right into the Arduino. The micro SD card slot must be on the same side as the Arduino's power plug. 
- Arduino 1  Pin 25 <--> Resistor  <-->  Arduino  +5V
- Arduino 2  Pin 25 <--> Resistor (optional)  <-->  Arduino  GND
- TX3 (Arduino 1) <--> RX3 (Arduino 2)
- RX3 (Arduino 1) <--> TX3 (Arduino 2)
- GND (Arduino 1) <--> GND (Arduino 2)
- Arduino 1 and Arduino 2
	Pin 29 <--> Send button <--> GND
	Pin 35 <--> Buzzer <--> GND
	Pin 41 <--> Morse Button <--> GND


=> Running  Instructions:
1.  Connect  the  Arduino  to the PC using an A-B style  USB  cable. Ensure that  the  Arduino  is using  the  proper  serial  port (/dev/ttyACM0  or -ACM1).
2. In the  directory  containing  the  files  communication.cpp and Makefile, use command 'make  upload" to  upload  the  code to the  Arduino.
3. Code is uploaded, so user can open Serial window by entering command 'serial-mon-0' and then start the chat.

-------------------------------------------------------------------------------------------------------
=> Program:

In this program we start by initializing the key exchange protocol using the Diffie-Hellman Scheme.

After keys are computed correctly, we start the arduinos with a welcome message. Now the server go into message enter mode and client is in decryption mode which wait for server to send encrypted information. Server,wait for user to enter the message using morse codes and timing set for morse codes are as follow, for a dot- dot<200 ms, for a dash- 200<dash<600 ms, end of character code - 600<charater end<<1000 ms and for a space- 1000>space. When user give instruction for a end of charater by pressing button for more then 600ms and less then 1000ms, we get to know that complete morse code for a letter is entered and now we find the match for that dot-dash pattern in database and get the character. We allow user to enter message as long as he want with no maximum restriction unless momory is full in arduino. When user click on the send buttor we change state to the encryption and the add encryption key wiht each character ascii value and send it to the serial mon 3. We add a ! in end of string to know that message string is encrypted fully. We also send ! after encoding on the serial mon 3 so the client could know that whole message is rescieved. Now the client which was on decryption mode take information from serial and we subtract the encryption key to get the original ascii and we decode entire message in this way. We use add/subtract since the key is going to be unique with no bounds so to avoid overflow we decided to go with add/sub rather then mult/div. Now we use database and find the dot-dash pattern for each letter and display it on screen with the dot-dash pattern sound. Giving a real decoding of morse code feeling. Now we allow client to enter message and send it to server. In this way we enable a two way communication.










